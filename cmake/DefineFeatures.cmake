include(CMakeDependentOption)

option(FEATURE_IPV6 "Enable IPv6 support" ON)
cmake_dependent_option(HAVE_IPV6 "Enable IPv6 support" ON "FEATURE_IPV6" OFF)
mark_as_advanced(HAVE_IPV6)

option(FEATURE_SSL "Enable SSL support" ON)
if(FEATURE_SSL)
    find_package(OpenSSL)
    if(OPENSSL_FOUND)
        list(APPEND ZNC_INCLUDEDIRS ${OPENSSL_INCLUDE_DIRS})
        list(APPEND ZNC_LIBRARIES ${OPENSSL_LIBRARIES})
    endif()
endif()
cmake_dependent_option(HAVE_LIBSSL "Enable SSL support" ON "FEATURE_SSL;OPENSSL_FOUND" OFF)
cmake_dependent_option(HAVE_LIBCRYPTO "Enable libcrypto support" ON "FEATURE_SSL;OPENSSL_FOUND" OFF)
mark_as_advanced(HAVE_LIBSSL HAVE_LIBCRYPTO)

option(FEATURE_ICU "ICU support" ON)
if(FEATURE_ICU)
    find_package(ICU)
    if(ICU_FOUND)
        list(APPEND ZNC_INCLUDEDIRS ${ICU_INCLUDE_DIRS})
        list(APPEND ZNC_LIBRARIES ${ICU_LIBRARIES})
    endif()
endif()
cmake_dependent_option(HAVE_ICU "Enable ICU support" ON "FEATURE_ICU;ICU_FOUND" OFF)
mark_as_advanced(HAVE_ICU)

option(FEATURE_ZLIB "Enable zlib support" ON)
if(FEATURE_ZLIB)
    find_package(ZLIB)
    if(ZLIB_FOUND)
        list(APPEND ZNC_INCLUDEDIRS ${ZLIB_INCLUDE_DIRS})
        list(APPEND ZNC_LIBRARIES ${ZLIB_LIBRARIES})
    endif()
endif()
cmake_dependent_option(HAVE_ZLIB "Enable zlib support" ON "FEATURE_ZLIB;ZLIB_FOUND" OFF)
mark_as_advanced(HAVE_ZLIB)

option(FEATURE_THREADS "Enable threads support" ON)
if(FEATURE_THREADS)
    set(CMAKE_THREAD_PREFER_PTHREAD 1)
    find_package(Threads)
    if(Threads_FOUND)
        set(HAVE_PTHREAD 1)
        list(APPEND ZNC_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
    endif()
endif()
cmake_dependent_option(HAVE_THREADS "Enable thread support" ON "FEATURE_THREADS;Threads_FOUND" OFF)
mark_as_advanced(HAVE_THREADS)

cmake_dependent_option(FEATURE_SWIG "Enable SWIG support" ON "FEATURE_PERL OR FEATURE_PYTHON" OFF)
if(FEATURE_SWIG)
    find_package(SWIG 3.0.0)
    if(NOT SWIG_FOUND)
        if(FEATURE_PERL AND FEATURE_PYTHON)
            message(WARNING "Perl and Python have been disabled")
        elseif(FEATURE_PERL)
            message(WARNING "Perl has been disabled")
        elseif(FEATURE_PYTHON)
            message(WARNING "Python has disabled")
        endif()
    endif()
endif()
cmake_dependent_option(HAVE_SWIG "Enable SWIG support" ON "FEATURE_SWIG;SWIG_FOUND" OFF)
mark_as_advanced(HAVE_SWIG SWIG_EXECUTABLE)

if(FEATURE_PERL OR FEATURE_PYTHON)
    find_package(Perl)
endif()

cmake_dependent_option(FEATURE_PERL "Enable Perl support" OFF "HAVE_SWIG;PERL_FOUND" OFF)
if(FEATURE_PERL)
    find_package(PerlLibs)
endif()
cmake_dependent_option(HAVE_PERL "Enable Perl support" ON "FEATURE_PERL;PERLLIBS_FOUND" OFF)
mark_as_advanced(HAVE_PERL)

cmake_dependent_option(FEATURE_PYTHON "Enable Python support" OFF "HAVE_SWIG;PERL_FOUND" OFF)
if(FEATURE_PYTHON)
    find_package(PythonLibs)
endif()
cmake_dependent_option(HAVE_PYTHON "Enable Python support" ON "FEATURE_PYTHON;PYTHONLIBS_FOUND" OFF)
mark_as_advanced(HAVE_PYTHON)

option(FEATURE_TCL "Enable TCL support" OFF)
if(FEATURE_TCL)
    find_package(TCL)
endif()
cmake_dependent_option(HAVE_TCL "Enable TCL support" ON "FEATURE_TCL;TCL_FOUND" OFF)
mark_as_advanced(HAVE_TCL)

option(FEATURE_POLL "Use poll() instead of select()" ON)
cmake_dependent_option(CSOCK_USE_POLL "Use poll() instead of select()" ON "FEATURE_POLL" OFF)
mark_as_advanced(CSOCK_USE_POLL)

option(FEATURE_LARGEFILE "Enable large file support" ON)
cmake_dependent_option(_LARGE_FILES "Enable large file support" ON "FEATURE_LARGEFILE" OFF)
mark_as_advanced(_LARGE_FILES)

option(FEATURE_CYRUS "Enable Cyrus support" OFF)
if(FEATURE_CYRUS)
    find_package(Sasl2)
    if(SASL2_FOUND)
        list(APPEND ZNC_INCLUDEDIRS ${SASL2_INCLUDE_DIR})
        list(APPEND ZNC_LIBRARIES ${SASL2_LIBRARIES})
    endif()
endif()
cmake_dependent_option(HAVE_CYRUS "Enable Cyrus support" ON "FEATURE_CYRUS;SASL2_FOUND" OFF)
mark_as_advanced(HAVE_CYRUS)

option(DEVELOPER_BUILD "Enable developer build" OFF)
if(DEVELOPER_BUILD)
    set(CMAKE_BUILD_TYPE "Debug")
elseif(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

cmake_dependent_option(FEATURE_GIT "Enable Git" ON "EXISTS ${PROJECT_SOURCE_DIR}/.git" OFF)
if(FEATURE_GIT)
    find_package(Git QUIET)
endif()
